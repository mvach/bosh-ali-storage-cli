// Code generated by counterfeiter. DO NOT EDIT.
package clientfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-ali-storage-cli/client"
)

type FakeStorageClient struct {
	DeleteStub        func(string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 string
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	DownloadStub        func(string, string) error
	downloadMutex       sync.RWMutex
	downloadArgsForCall []struct {
		arg1 string
		arg2 string
	}
	downloadReturns struct {
		result1 error
	}
	downloadReturnsOnCall map[int]struct {
		result1 error
	}
	ExistsStub        func(string) (bool, error)
	existsMutex       sync.RWMutex
	existsArgsForCall []struct {
		arg1 string
	}
	existsReturns struct {
		result1 bool
		result2 error
	}
	existsReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	SignedUrlGetStub        func(string, int64) (string, error)
	signedUrlGetMutex       sync.RWMutex
	signedUrlGetArgsForCall []struct {
		arg1 string
		arg2 int64
	}
	signedUrlGetReturns struct {
		result1 string
		result2 error
	}
	signedUrlGetReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	SignedUrlPutStub        func(string, int64) (string, error)
	signedUrlPutMutex       sync.RWMutex
	signedUrlPutArgsForCall []struct {
		arg1 string
		arg2 int64
	}
	signedUrlPutReturns struct {
		result1 string
		result2 error
	}
	signedUrlPutReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	UploadStub        func(string, string, string) error
	uploadMutex       sync.RWMutex
	uploadArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	uploadReturns struct {
		result1 error
	}
	uploadReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStorageClient) Delete(arg1 string) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStorageClient) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeStorageClient) DeleteCalls(stub func(string) error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeStorageClient) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStorageClient) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorageClient) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorageClient) Download(arg1 string, arg2 string) error {
	fake.downloadMutex.Lock()
	ret, specificReturn := fake.downloadReturnsOnCall[len(fake.downloadArgsForCall)]
	fake.downloadArgsForCall = append(fake.downloadArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.DownloadStub
	fakeReturns := fake.downloadReturns
	fake.recordInvocation("Download", []interface{}{arg1, arg2})
	fake.downloadMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStorageClient) DownloadCallCount() int {
	fake.downloadMutex.RLock()
	defer fake.downloadMutex.RUnlock()
	return len(fake.downloadArgsForCall)
}

func (fake *FakeStorageClient) DownloadCalls(stub func(string, string) error) {
	fake.downloadMutex.Lock()
	defer fake.downloadMutex.Unlock()
	fake.DownloadStub = stub
}

func (fake *FakeStorageClient) DownloadArgsForCall(i int) (string, string) {
	fake.downloadMutex.RLock()
	defer fake.downloadMutex.RUnlock()
	argsForCall := fake.downloadArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStorageClient) DownloadReturns(result1 error) {
	fake.downloadMutex.Lock()
	defer fake.downloadMutex.Unlock()
	fake.DownloadStub = nil
	fake.downloadReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorageClient) DownloadReturnsOnCall(i int, result1 error) {
	fake.downloadMutex.Lock()
	defer fake.downloadMutex.Unlock()
	fake.DownloadStub = nil
	if fake.downloadReturnsOnCall == nil {
		fake.downloadReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.downloadReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorageClient) Exists(arg1 string) (bool, error) {
	fake.existsMutex.Lock()
	ret, specificReturn := fake.existsReturnsOnCall[len(fake.existsArgsForCall)]
	fake.existsArgsForCall = append(fake.existsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ExistsStub
	fakeReturns := fake.existsReturns
	fake.recordInvocation("Exists", []interface{}{arg1})
	fake.existsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStorageClient) ExistsCallCount() int {
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	return len(fake.existsArgsForCall)
}

func (fake *FakeStorageClient) ExistsCalls(stub func(string) (bool, error)) {
	fake.existsMutex.Lock()
	defer fake.existsMutex.Unlock()
	fake.ExistsStub = stub
}

func (fake *FakeStorageClient) ExistsArgsForCall(i int) string {
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	argsForCall := fake.existsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStorageClient) ExistsReturns(result1 bool, result2 error) {
	fake.existsMutex.Lock()
	defer fake.existsMutex.Unlock()
	fake.ExistsStub = nil
	fake.existsReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeStorageClient) ExistsReturnsOnCall(i int, result1 bool, result2 error) {
	fake.existsMutex.Lock()
	defer fake.existsMutex.Unlock()
	fake.ExistsStub = nil
	if fake.existsReturnsOnCall == nil {
		fake.existsReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.existsReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeStorageClient) SignedUrlGet(arg1 string, arg2 int64) (string, error) {
	fake.signedUrlGetMutex.Lock()
	ret, specificReturn := fake.signedUrlGetReturnsOnCall[len(fake.signedUrlGetArgsForCall)]
	fake.signedUrlGetArgsForCall = append(fake.signedUrlGetArgsForCall, struct {
		arg1 string
		arg2 int64
	}{arg1, arg2})
	stub := fake.SignedUrlGetStub
	fakeReturns := fake.signedUrlGetReturns
	fake.recordInvocation("SignedUrlGet", []interface{}{arg1, arg2})
	fake.signedUrlGetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStorageClient) SignedUrlGetCallCount() int {
	fake.signedUrlGetMutex.RLock()
	defer fake.signedUrlGetMutex.RUnlock()
	return len(fake.signedUrlGetArgsForCall)
}

func (fake *FakeStorageClient) SignedUrlGetCalls(stub func(string, int64) (string, error)) {
	fake.signedUrlGetMutex.Lock()
	defer fake.signedUrlGetMutex.Unlock()
	fake.SignedUrlGetStub = stub
}

func (fake *FakeStorageClient) SignedUrlGetArgsForCall(i int) (string, int64) {
	fake.signedUrlGetMutex.RLock()
	defer fake.signedUrlGetMutex.RUnlock()
	argsForCall := fake.signedUrlGetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStorageClient) SignedUrlGetReturns(result1 string, result2 error) {
	fake.signedUrlGetMutex.Lock()
	defer fake.signedUrlGetMutex.Unlock()
	fake.SignedUrlGetStub = nil
	fake.signedUrlGetReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeStorageClient) SignedUrlGetReturnsOnCall(i int, result1 string, result2 error) {
	fake.signedUrlGetMutex.Lock()
	defer fake.signedUrlGetMutex.Unlock()
	fake.SignedUrlGetStub = nil
	if fake.signedUrlGetReturnsOnCall == nil {
		fake.signedUrlGetReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.signedUrlGetReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeStorageClient) SignedUrlPut(arg1 string, arg2 int64) (string, error) {
	fake.signedUrlPutMutex.Lock()
	ret, specificReturn := fake.signedUrlPutReturnsOnCall[len(fake.signedUrlPutArgsForCall)]
	fake.signedUrlPutArgsForCall = append(fake.signedUrlPutArgsForCall, struct {
		arg1 string
		arg2 int64
	}{arg1, arg2})
	stub := fake.SignedUrlPutStub
	fakeReturns := fake.signedUrlPutReturns
	fake.recordInvocation("SignedUrlPut", []interface{}{arg1, arg2})
	fake.signedUrlPutMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStorageClient) SignedUrlPutCallCount() int {
	fake.signedUrlPutMutex.RLock()
	defer fake.signedUrlPutMutex.RUnlock()
	return len(fake.signedUrlPutArgsForCall)
}

func (fake *FakeStorageClient) SignedUrlPutCalls(stub func(string, int64) (string, error)) {
	fake.signedUrlPutMutex.Lock()
	defer fake.signedUrlPutMutex.Unlock()
	fake.SignedUrlPutStub = stub
}

func (fake *FakeStorageClient) SignedUrlPutArgsForCall(i int) (string, int64) {
	fake.signedUrlPutMutex.RLock()
	defer fake.signedUrlPutMutex.RUnlock()
	argsForCall := fake.signedUrlPutArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStorageClient) SignedUrlPutReturns(result1 string, result2 error) {
	fake.signedUrlPutMutex.Lock()
	defer fake.signedUrlPutMutex.Unlock()
	fake.SignedUrlPutStub = nil
	fake.signedUrlPutReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeStorageClient) SignedUrlPutReturnsOnCall(i int, result1 string, result2 error) {
	fake.signedUrlPutMutex.Lock()
	defer fake.signedUrlPutMutex.Unlock()
	fake.SignedUrlPutStub = nil
	if fake.signedUrlPutReturnsOnCall == nil {
		fake.signedUrlPutReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.signedUrlPutReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeStorageClient) Upload(arg1 string, arg2 string, arg3 string) error {
	fake.uploadMutex.Lock()
	ret, specificReturn := fake.uploadReturnsOnCall[len(fake.uploadArgsForCall)]
	fake.uploadArgsForCall = append(fake.uploadArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.UploadStub
	fakeReturns := fake.uploadReturns
	fake.recordInvocation("Upload", []interface{}{arg1, arg2, arg3})
	fake.uploadMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStorageClient) UploadCallCount() int {
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	return len(fake.uploadArgsForCall)
}

func (fake *FakeStorageClient) UploadCalls(stub func(string, string, string) error) {
	fake.uploadMutex.Lock()
	defer fake.uploadMutex.Unlock()
	fake.UploadStub = stub
}

func (fake *FakeStorageClient) UploadArgsForCall(i int) (string, string, string) {
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	argsForCall := fake.uploadArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeStorageClient) UploadReturns(result1 error) {
	fake.uploadMutex.Lock()
	defer fake.uploadMutex.Unlock()
	fake.UploadStub = nil
	fake.uploadReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorageClient) UploadReturnsOnCall(i int, result1 error) {
	fake.uploadMutex.Lock()
	defer fake.uploadMutex.Unlock()
	fake.UploadStub = nil
	if fake.uploadReturnsOnCall == nil {
		fake.uploadReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.uploadReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorageClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.downloadMutex.RLock()
	defer fake.downloadMutex.RUnlock()
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	fake.signedUrlGetMutex.RLock()
	defer fake.signedUrlGetMutex.RUnlock()
	fake.signedUrlPutMutex.RLock()
	defer fake.signedUrlPutMutex.RUnlock()
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStorageClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ client.StorageClient = new(FakeStorageClient)
